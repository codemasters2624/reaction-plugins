"A Reaction unit"
type Unit {
  "Unit ID"
  _id: ID!

  "The date and time at which this unit was created"
  createdAt: DateTime!

  "Number of Doors a Unit can have attached to it"
  numberOfDoors: Int

  "Hash to compare with publishedUnitHash, to see if this unit has changed since it was last published"
  currentUnitHash: String

  "The full unit description, which may have newline characters in it"
  description: String

  "True if this unit has been deleted. Typically, deleted units are not returned in queries."
  isDeleted: Boolean!

  "True if this unit should be shown to shoppers. Typically, non-visible units are not returned in queries."
  isVisible: Boolean!

  "Sizes of the Doors to be attached with the Unit"
  doorSizes: [Int]
  "All media for a unit"
  media(
    "Determines whether variant media should be included in the unit or not"
    shouldIncludeVariantMedia: Boolean = true
  ): [ImageInfo]

  "The unit description to use for page `description` meta element in HTML"
  metaDescription: String

  "Arbitrary additional metadata about this unit"
  metafields: [Metafield]!

  "The country of origin"
  originCountry: String

  "Subtitle"
  pageTitle: String

  "An arbitrary unit type value, such as from an external system"
  unitType: String

  "The date and time at which this unit was last published. If `null`, it has never been published."
  publishedAt: DateTime

  "Hash to compare with currentUnitHash, to see if this unit has changed since it was last published"
  publishedUnitHash: String

  "The shop to which this unit belongs"
  shop: Shop!

  "Whether this unit will be shown in the generated sitemap"
  shouldAppearInSitemap: Boolean

  "A URL-safe and human-readable string that uniquely identifies this unit"
  slug: String

  "Holds metadata specific to a specific social network service"
  socialMetadata: [SocialMetadata]

  "When a shopper purchases this unit, what types of fulfillment can they choose from?"
  supportedFulfillmentTypes: [FulfillmentType]!

  "The list of tag IDs that have been applied to this unit"
  tagIds: [ID]

  "The list of tags that have been applied to this unit"
  tags(
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, tags are sorted by ID. Set this to sort by one of the other allowed fields"
    sortBy: TagSortByField = _id
  ): TagConnection

  "Unit title"
  title: String

  "The date and time at which this unit was last updated"
  updatedAt: DateTime

  "A list of all variants for this unit"
  variants(
    "Include hidden variants"
    shouldIncludeHidden: Boolean = true

    "Include archived variants"
    shouldIncludeArchived: Boolean = false
  ): [UnitVariant]!

  "A list of all door variants for this unit"
  doorVariants(
    "Include hidden variants"
    shouldIncludeHidden: Boolean = true

    "Include archived variants"
    shouldIncludeArchived: Boolean = false
  ): [DoorVariant]!

  "The unit vendor or manufacturer, for display"
  vendor: String
}

"A Reaction unit variant or option"
type UnitVariant {
  "Variant ID"
  _id: ID!

  """
  The attribute label describes the category of variant, for example, `Color` or `Size`.
  In most cases this will be the same for all variants at the same level.
  """
  attributeLabel: String

  "The unit variant barcode value, if it has one"
  barcode: String

  "The date and time at which this variant was created"
  createdAt: DateTime

  "The height of the unit variant, if it has physical dimensions"
  height: Float

  "The position of this variant among other variants at the same level of the unit-variant-option hierarchy"
  index: Int

  "True if this variant was deleted. Deleted variants are not published to the catalog."
  isDeleted: Boolean!

  "True if this variant is visible. Hidden variants are not published to the catalog."
  isVisible: Boolean!

  "The length of the unit, if it has physical dimensions"
  length: Float

  "All media for a variant"
  media: [ImageInfo]

  "Arbitrary additional metadata about this unit"
  metafields: [Metafield]!

  "The minimum quantity that must be added to a cart"
  minOrderQuantity: Int

  "A short title to use for unit detail select lists"
  optionTitle: String

  "Child variants, if any"
  options(
    "Include hidden variants"
    shouldIncludeHidden: Boolean = true

    "Include archived variants"
    shouldIncludeArchived: Boolean = false
  ): [UnitVariant]!

  "The country of origin"
  originCountry: String

  "The shop to which this unit variant belongs"
  shop: Shop!

  "SKU of variant"
  sku: String

  """
  The full variant title for use on cart, checkout, and order summaries and on invoices.
  This fully describes the configured variant. For example, if this is an option with
  `optionTitle` "Large", its parent variant has `optionTitle` `Red`, and the unit
  `title` is "Fancy T-Shirt", then this `title` will be something like `Fancy T-Shirt - Red - Large`.
  """
  title: String

  "The date and time at which this unit was last updated"
  updatedAt: DateTime

  "The weight of the unit on Earth, if it has physical dimensions"
  weight: Float

  "The width of the unit, if it has physical dimensions"
  width: Float
}

"Response payload of `archiveUnits` mutation"
type ArchiveUnitsPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly archived units"
  units: [Unit]!
}

"Response payload of `archiveUnitVariants` mutation"
type ArchiveUnitVariantsPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly archived variants"
  variants: [UnitVariant]!
}

"Response payload for `updateUnitsVisibility` mutation"
type UpdateUnitsVisibilityPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The number of units that were updated successfully"
  updatedCount: Int
}

"Response payload of `createUnit` mutation"
type CreateUnitPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The created unit"
  unit: Unit!
}

"Response payload of `createUnitVariant` mutation"
type CreateUnitVariantPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The created unit variant"
  variant: UnitVariant!
}

"Response payload of `cloneUnits` mutation"
type CloneUnitsPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly cloned units"
  units: [Unit]!
}

"Response payload of `cloneUnitVariants` mutation"
type CloneUnitVariantsPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly cloned unit variants"
  variants: [UnitVariant]!
}

"Response payload of `updateUnit` mutation"
type UpdateUnitPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Updated unit"
  unit: Unit!
}

"Response payload of `updateUnitVariantField` mutation"
type UpdateUnitVariantPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Updated variant"
  variant: UnitVariant!
}

"A connection edge in which each node is a `Unit` object"
type UnitEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The unit"
  node: Unit
}

"""
Wraps a list of Units`s, providing pagination cursors and information.

For information about what Relay-compatible connections are and how to use them, see the following articles:
- [Relay Connection Documentation](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections)
- [Relay Connection Specification](https://facebook.github.io/relay/graphql/connections.htm)
- [Using Relay-style Connections With Apollo Client](https://www.apollographql.com/docs/react/recipes/pagination.html)
"""
type UnitConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [UnitEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [Unit]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

"Input for the `archiveUnits` mutation"
input ArchiveUnitsInput {
  "Array of IDs of units to archive"
  unitIds: [ID]!

  "ID of shop that owns all units you are archiving"
  shopId: ID!
}

"Input for the `archiveUnits` mutation"
input ArchiveUnitVariantsInput {
  "ID of shop that owns all variants you are archiving"
  shopId: ID!

  "Array of IDs of variants to archive"
  variantIds: [ID]!
}

"Input for the `updateUnitsVisibility` mutation"
input UpdateUnitsVisibilityInput {
  "The desired visibility"
  isVisible: Boolean!

  "Array of unit ids to update"
  unitIds: [ID]!

  "ID of shop the units belong to"
  shopId: ID!
}

"Input for the `createUnit` mutation"
input CreateUnitInput {
  "Unit input"
  unit: UnitInput

  "ID of shop unit will belong to"
  shopId: ID!

  "Set to false if you do not want to auto-create the first variant of the unit"
  shouldCreateFirstVariant: Boolean = true
}

"Input for the `createUnitVariant` mutation"
input CreateUnitVariantInput {
  "ID of unit variant belongs to"
  unitId: ID!

  "ID of shop unit variant will belong to"
  shopId: ID!

  "Variant input"
  variant: UnitVariantInput
}

"Input for the `cloneUnits` mutation"
input CloneUnitsInput {
  "Array of IDs of units to clone"
  unitIds: [ID]!

  "ID of shop that owns all units you are cloning"
  shopId: ID!
}

"Input for the `cloneUnitVariants` mutation"
input CloneUnitVariantsInput {
  "ID of shop that owns all unit variants you want to clone"
  shopId: ID!

  "Array of IDs of variants to clone"
  variantIds: [ID]!
}

"Input for the `updateUnit` mutation"
input UpdateUnitInput {
  "Unit input"
  unit: UnitInput!

  "ID of unit to update"
  unitId: ID!

  "ID of shop that owns the unit to update"
  shopId: ID!
}

"Mutation input for a unit"
input UnitInput {
  """
  Any string to use as the internal ID for a new unit. Do not prefix or base64 encode this ID.
  This field is allowed only when creating a unit. If you include an ID for an update, you
  will get an error. The string must also be different from any existing unit, variant, or
  option internal ID or you will get a duplicate ID error. If you do not include this when creating
  a unit, a random unique string is generated for you.
  """
  _id: String

  "The full unit description, which may have newline characters in it"
  description: String

  "Facebook message"
  facebookMsg: String

  "Google message"
  googleplusMsg: String

  "Door Variant attached to this Unit"
  doorVariant: [DoorVariantInput]

  "True if this unit has been deleted. Typically, deleted units are not returned in queries."
  isDeleted: Boolean

  "True if this unit should be shown to shoppers. Typically, non-visible units are not returned in queries."
  isVisible: Boolean

  "The unit description to use for page `description` meta element in HTML"
  metaDescription: String

  "Arbitrary additional metadata about this unit"
  metafields: [MetafieldInput]

  "Number of Doors a Unit can have"
  numberOfDoors: Int

  "The country of origin"
  originCountry: String

  "Subtitle"
  pageTitle: String

  "Pinterest message"
  pinterestMsg: String

  "An arbitrary unit type value, such as from an external system"
  unitType: String

  "Whether this unit will be shown in the generated sitemap"
  shouldAppearInSitemap: Boolean

  "A URL-safe and human-readable string that uniquely identifies this unit"
  slug: String

  "When a shopper purchases this unit, what types of fulfillment can they choose from?"
  supportedFulfillmentTypes: [FulfillmentType]

  "The list of tag IDs that have been applied to this unit"
  tagIds: [ID]

  "Unit title"
  title: String

  "Twitter message"
  twitterMsg: String

  "The unit vendor or manufacturer, for display"
  vendor: String
}

"Mutation input for a unit variant or option"
input UnitVariantInput {
  """
  Any string to use as the internal ID for a new variant. Do not prefix or base64 encode this ID.
  This field is allowed only when creating a variant. If you include an ID for an update, you
  will get an error. The string must also be different from any existing unit, variant, or
  option internal ID or you will get a duplicate ID error. If you do not include this when creating
  a variant, a random unique string is generated for you.
  """
  _id: String

  """
  The attribute label describes the category of variant, for example, `Color` or `Size`.
  In most cases this will be the same for all variants at the same level.
  """
  attributeLabel: String

  "The unit variant barcode value, if it has one"
  barcode: String

  "The height of the unit variant, if it has physical dimensions"
  height: Float

  "The position of this variant among other variants at the same level of the unit-variant-option hierarchy"
  index: Int

  "True if this variant was deleted. Deleted variants are not published to the catalog."
  isDeleted: Boolean

  "True if this variant is visible. Hidden variants are not published to the catalog."
  isVisible: Boolean

  "The length of the unit, if it has physical dimensions"
  length: Float

  "Arbitrary additional metadata about this unit"
  metafields: [MetafieldInput]

  "The minimum quantity that must be added to a cart"
  minOrderQuantity: Int

  "A short title to use for unit detail select lists"
  optionTitle: String

  "The country of origin"
  originCountry: String

  "SKU of variant"
  sku: String

  """
  The full variant title for use on cart, checkout, and order summaries and on invoices.
  This fully describes the configured variant. For example, if this is an option with
  `optionTitle` `Large`, its parent variant has `optionTitle` `Red`, and the unit
  `title` is `Fancy T-Shirt`, then this `title` will be something like `Fancy T-Shirt - Red - Large`.
  """
  title: String

  "The weight of the unit on Earth, if it has physical dimensions"
  weight: Float

  "The width of the unit, if it has physical dimensions"
  width: Float
}

"Input for the `updateUnitVariantField` mutation"
input UpdateUnitVariantInput {
  "ID of shop that owns the variant to update"
  shopId: ID!

  "Variant input"
  variant: UnitVariantInput!

  "ID of variant to update"
  variantId: ID!
}

"The fields by which you are allowed to sort any query that returns a `UnitConnection`"
enum UnitSortByField {
  "Unit ID"
  _id

  "Date and time the unit was created"
  createdAt

  "Unit title"
  title

  "Date and time the unit was last updated"
  updatedAt
}

extend type Mutation {
  "Archive units"
  archiveUnits("Mutation input" input: ArchiveUnitsInput!): ArchiveUnitsPayload!

  "Archive unit variants"
  archiveUnitVariants(
    "Mutation input"
    input: ArchiveUnitVariantsInput!
  ): ArchiveUnitVariantsPayload!

  "Update the isVisible property of an array of units"
  updateUnitsVisibility(
    "Mutation input"
    input: UpdateUnitsVisibilityInput!
  ): UpdateUnitsVisibilityPayload!

  "Create a new unit"
  createUnit("Mutation input" input: CreateUnitInput!): CreateUnitPayload!

  "Create a new unit variant"
  createUnitVariant(
    "Mutation input"
    input: CreateUnitVariantInput!
  ): CreateUnitVariantPayload!

  "Clone an existing unit"
  cloneUnits("Mutation input" input: CloneUnitsInput!): CloneUnitsPayload!

  "Clone an existing unit variant"
  cloneUnitVariants(
    "Mutation input"
    input: CloneUnitVariantsInput!
  ): CloneUnitVariantsPayload!

  "Update an existing unit"
  updateUnit("Mutation input" input: UpdateUnitInput!): UpdateUnitPayload!

  "Update an existing unit variant"
  updateUnitVariant(
    "Mutation input"
    input: UpdateUnitVariantInput!
  ): UpdateUnitVariantPayload!
}

extend type Query {
  "Query for a single Unit"
  unit(
    "Unit ID"
    unitId: ID!

    "Shop ID"
    shopId: ID!
  ): Unit

  "Query for a list of Units"
  units(
    "Filter by archived"
    isArchived: Boolean

    "Filter by visibility"
    isVisible: Boolean

    "Filter by metafield key"
    metafieldKey: String

    "Filter by metafield value"
    metafieldValue: String

    "Filter by price range maximum value"
    priceMax: Float

    "Filter by price range minimum value"
    priceMin: Float

    "List of unit IDs to filter by"
    unitIds: [ID]

    "Regex metch query string"
    query: String

    "List of shop IDs to filter by"
    shopIds: [ID]!

    "List of tag ids to filter by"
    tagIds: [ID]

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = desc

    "By default, units are sorted by createdAt. Set this to sort by one of the other allowed fields"
    sortBy: UnitSortByField = createdAt
  ): UnitConnection
}
